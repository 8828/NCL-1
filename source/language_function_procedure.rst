函数和子程序
==============
为了提高程序的复用性，将特定的功能写成函数或子程序是非常不错的选择。
函数和子程序的区别大概在于函数一般有返回值，而子程序没有。


函数和子程序定义
-------------------
定义函数和子程序的区别不大，除了为首的关键词，函数使用 :code:`function` ，而子程序
使用 :code:`procedure` 。定义一个函数基本上包含以下几个步骤，

1. 定义函数名
由一个关键词:code:`function` 或 :code:`procedure` 开头，空格后接函数名称，注意函
数名的取法要紧贴函数所实现的功能，同时建议使用下划线命名法，函数名后是以小括号括
起来的的形参列表，每一个形参用逗号隔开，形参后可用冒号接NCL类型关键词如
:code:`integer` ，:code:`string` 来指定该形参的类型。

.. code::
    function function_name ( arg1:type1, arg2:type2, ... )

2. 声明局部变量（可选步骤）
局部变量的声明在NCL函数定义中是可选的，但是从可靠性和严谨的思路上讲，声明局部变量
是非常有帮助的，这可以避免函数体中对局部变量可能的错误引用。局部变量的声明以关键词
:code:`local` 开头，后接所有在函数中出现的局部变量，各个变量间以逗号隔开。

.. code::
    local local_var1, local_var2, local_var3, ...

3. 使用begin来开始封装函数主体
之前的学习中，我们已经知道，程序主体可以用 :code:`begin`和 :code:`end`
来封装，封装后的运行将首先进行语法检查，且这种封装是可选的。而在函数定义中，必须
使用 :code:`begin`和:code:`end` 来封装函数主体，否则将引发NCL异常。

.. code::
    begin

4. 函数主体语句
函数的主体是实现函数功能的NCL语句集合

.. code::
    statement list

5. 返回函数结果（可选步骤）
函数一般有返回值，而子程序没有，函数在执行一定计算后，通常要返回一个计算结果。
使用 :code:`return` 语句来返回函数结果， :code:`return` 后接括号，将返回值置于
其中即可。实际上，由于return是一个语句，这对括号是可选的，直接空格接返回值亦可。

.. code::
    return(return_value)

6. 用end来结束函数主体和封装

.. code::
    end



函数和子程序调用
-------------------



变量作用域
-------------------



局部变量
^^^^^^^^^^^^^^^



全局变量
^^^^^^^^^^^^^^^