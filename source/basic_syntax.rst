基础语法
========================
许多的NCL初学者都通过学习范例的形式来开始NCL的学习，一些人甚至不屑于去看语法知识。
这样难免造成后续的一些恶果，经常是程序执行出行异常，却不知是何原因，事实上都是忽
视语法学习的后果。

NCL的语言十分简洁，甚至可以说有些简陋，所以学习起来并不十分费劲。我想大概也就是
几个小时的时间，就能让你有个较为全面的理解。

NCL语言特点
------------------
动态类型语言
^^^^^^^^^^^^^^
相较于编译型语言，脚本解释性语言通常设计的比较灵活，NCL也不例外。动态类型语言也
就是说，你不要在赋值一个变量前声明变量的类型，当你赋值后，NCL解释器将自动根据值
的类型来确定变量类型。常见的动态类型语言还有Python、Ruby，或者你在用的Matlab。

强类型语言
^^^^^^^^^^^^^^^
NCL同时还是强类型语言，也就是说一旦变量类型确定，除强制转换类型外，你无法改变变
量的类型。因此强类型语言是类型安全的语言。显而易见，强类型语言的在类型上的严谨性
能够有效的避免许多错误。

________________________________________________________________________________

NCL数据类型
-----------------------
基本上，NCL的数据类型可以分为两类，一类为数值类型（numeric），另一类则是非数值类
型（Non-numeric）。

数值类型
^^^^^^^^^^^^^^^^
数值类型说白点就是常用的整数、浮点数（或许你叫小数），也是在各类语言中都存在的基
本类型。numeric类型下面分属的各种类型支持NCL中所有的代数函数。由于NCL的数据结构参
照NetCDF，随着NetCDF中数据类型的改变，NCL在5.2.0版本中也增添了几种数值类型（int64，
uint64，ulong，uint，ushort，ubyte）以保持与NetCDF数据结构的同步。为了保持向后的兼容性，
NCL有增加了两个关键词，分别是enumeric (extra-numeric)和snumeric (super-numeric)，
前者（enumeric）特指新增加的这几种类型，而后者则指代所有的数值型，包括最初的numeric
和新增加的enumeric。这些关键词通常出现在函数和程序定义的形参类型制定中。对于初学
者而言，这些复杂的内部细节尚不需要完全知悉，稍作了解即可。

**整型**，也就是整数，当你在NCL命令行中输入 :code:`a = 1` ，此时变量a就被定义为
一个整型变量，值为1。你可以通过 :code:`print(a)` 来查看变量的类型。你在shell中看
到的应该是这样的一个输出::


    Variable: a  ; 这里指示输出的变量名为a
    Type: integer  ; 这里指示变量a类型为整型
    Total Size: 4 bytes ; 这里指示变量a占用的内存大小为4个字节
                1 values  ; 这里指示变量a总共有1个值
    Number of Dimensions: 1  ; 这里指示变量a的维数为1维
    Dimensions and sizes:   [1]  ; 这里指示变量a的每一维的大小，第一维上只有一个值 
    Coordinates:  ; 这里表示变量a的坐标，此时并没有坐标，所以空着
    (0) 1  ; 这里打印变量a的每一个值，和值的索引序号

.. note:: 你可能很好奇，为什么简单的打印一个变量会出来这么多东西。实际上这是因为NCL变量参照NetCDF模型，所以一个变量确定后就自动地拥有了维数、大小、坐标等等。这种我们称之为 **元数据** 的东西，在绘制图形型显得尤为重要。目前，你还不需要完全知悉这些细节。

事实上，整型数据涵盖的子类型较广泛，依据所占的内存大小，可以排列为

+------------+------------+--------------------+
|   类型     |  类型大小  |    名称            |
+============+============+====================+
|  int64     | 64位/6字节 |  64位整型          |
+------------+------------+--------------------+
|  uint64    | 64位/6字节 |  64位无符号整型    |
+------------+------------+--------------------+
|  long      | 32位| 64位 |  长整型            |
+------------+------------+--------------------+
|  ulong     | 32位| 64位 |  无符号长整型      |
+------------+------------+--------------------+
|  integer   | 32位/4字节 |  整型              |
+------------+------------+--------------------+
|  uinteger  | 32位/4字节 |  无符号整型        |
+------------+------------+--------------------+
|  short     | 16位/2字节 |  短整型            |
+------------+------------+--------------------+
|  ushort    | 16位/2字节 |  无符号短整型      |
+------------+------------+--------------------+
|  byte      | 8位/1字节  |  字节型            |
+------------+------------+--------------------+
|  ubyte     | 8位/1字节  |  无符号字节型      |
+------------+------------+--------------------+

**浮点型**，也就是小数，依据所占内存大小分为单精度（32位）和双精度浮点数（64位）。

+------------+------------+--------------------+
|   类型     |  类型大小  |    名称            |
+============+============+====================+
|  double    | 64位/6字节 |  双精度浮点数      |
+------------+------------+--------------------+
|  float     | 32位/4字节 |  单精度浮点数      |
+------------+------------+--------------------+

通常而言，我们不需要关心这么多具体的数据类型，因为你会发现最常用的只有
:code:`integer` 和 :code:`float` 这两种。只有在考虑设计数据结构或者读取的二进制
数据时，你才能接触到这些恼人的东西。比如当你读取的一个NetCDF文件变量，而有时你会
发现这个变量的类型竟是 :code:`short` ，此时你可能就需要做做转换了。




非数值类型
^^^^^^^^^^^^^^^^

NCL变量
-----------------------


NCL表达式
-----------------------


NCL语句
-----------------------


NCL关键字
-----------------------