NCL运算符与表达式
=====================
运算符或操作符指的是那些你从小就在使用的加号 :code:`+` 、减号 :code:`-` 等等。
运算符通过对值做“操作”或“运算”来生成新的值，运算符操作的对象是 **操作数** 或
**运算子** ，根据操作对象的数量可以将常见的运算符分为 **一元运算符** 如求反
:code:`-` 或 **二元运算符** 如加减乘除 :code:`+ - * /` 。对于二元运算符，可以将
其操作的两个操作数按相对位置分为左操作数和右操作数。

按照运算符的功能，可以将常用的运算符分为赋值运算符、算术运算符和逻辑运算符等

算术运算符
---------------
算术运算符操作基本数值类型的数组。NCL包含九个主要的算术运算符，分别是乘 :code:`*` 、
除 :code:`/` 、幂指数 :code:`^` 、加 :code:`+` 、减 :code:`-` 、取模（求余） :code:`%` 、
小于选择 :code:`>` 、大于选择 :code:`<` 、和求反 :code:`-` 。
除求反运算符为一元运算符外，所有的运算符都是二元运算符，都要求两个操作数。

一般来说，所有的操作数要求有相同的类型，如果对不同的类型变量进行算术运算，
NCL将尝试转换它们到相同的类型，如转换失败，NCL将抛出类型不匹配错误。
同时，操作数应该有相同的维数和大小，或者操作数分别为标量和数组，运算符
对整个数组进行操作。

+--------+------------+-----------------------------------------------------------------------------+
| 运算符 |  符号名称  |    符号解释                                                                 |
+========+============+=============================================================================+
|   \-   | 一元求反   | 生成操作数的负数                                                            |
+--------+------------+-----------------------------------------------------------------------------+
|   ^    | 幂指数     | 右操作数成为左操作数的幂                                                    |
+--------+------------+-----------------------------------------------------------------------------+
|   \*   | 乘         | 左操作数乘右操作数                                                          |
+        +------------+-----------------------------------------------------------------------------+
|   \/   | 除         | 左操作数除右操作数，支持整数除法                                            |
+        +------------+-----------------------------------------------------------------------------+
|   \%   | 取模       | 整数除法的整数余数，要求操作数都为整数                                      |
+        +------------+-----------------------------------------------------------------------------+
|   \#   | 矩阵乘     | 支持一维或二维数组，计算两数组的点积                                        |
+--------+------------+-----------------------------------------------------------------------------+
|   \+   | 加         | 左操作数加右操作数                                                          |
+        +------------+-----------------------------------------------------------------------------+
|   \-   | 减         | 左操作数减右操作数                                                          |
+--------+------------+-----------------------------------------------------------------------------+
|   <    | 小于选择   | 选择对应位置左右操作数中的较小的值（标量和数组，扩展标量到整个数组）        |
+        +------------+-----------------------------------------------------------------------------+
|   >    | 大于选择   |  类似小于选择运算符，相反操作                                               |
+--------+------------+-----------------------------------------------------------------------------+

注：同一栏下优先级相同，不同栏从上之下优先级降低，即求反优先级最高。



关系运算符
---------------
NCL参考手册中将关系运算符（大于、小于、大于等于、小于等于、等于、不等于）和逻辑
运算符（与、或、非、异或）合并在一起，这里我将把这两种运算符拆分开来说明。

关系运算符是你熟悉的小于、大于这类运算符，关系运算符是构成关系表达式的基础，当然
关系表达式也是逻辑表达式最简单的一种情形。

NCL关系运算符和其他语言一致，提供6种关系运算符分别是大于、小于、大于等于、
小于等于、等于、不等于。比较可惜的是，只能使用英文字母缩写的形式。

+--------+----------+---------+--------------------------+
| 运算符 | 含义     | 数学符号| 英语含义                 |
+========+==========+=========+==========================+
|  .gt.  | 大于     | >       | greater than             |
+--------+----------+---------+--------------------------+
|  .ge.  | 大于等于 | >=      | greater than or equa to  |
+--------+----------+---------+--------------------------+
|  .lt.  | 小于     | <       | less than                |
+--------+----------+---------+--------------------------+
|  .le.  | 小于等于 | <=      | less than or equal to    |
+--------+----------+---------+--------------------------+
|  .eq.  | 等于     | ==      | equal to                 |
+--------+----------+---------+--------------------------+
|  .ne.  | 不等于   | !=      | not equal to             |
+--------+----------+---------+--------------------------+

逻辑运算符
-------------------

+--------+----------+--------------+
| 运算符 | 含义     | 英语含义     |
+========+==========+==============+
|  .and. | 逻辑与   | and          |
+--------+----------+--------------+
|  .or.  | 逻辑或   | or           |
+--------+----------+--------------+
|  .not. | 逻辑非   | not          |
+--------+----------+--------------+
|  .xor. | 逻辑异或 | exclusive or |
+--------+----------+--------------+

赋值运算符
----------------

重赋值运算符
----------------

表达式
---------------